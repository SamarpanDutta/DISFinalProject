#pragma checksum "C:\Users\kotha\Source\Repos\DISFinalProject\Views\Home\Model.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bf73f159725ebc41637283ca07b8f3d7937a8b53"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Model), @"mvc.1.0.view", @"/Views/Home/Model.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\kotha\Source\Repos\DISFinalProject\Views\_ViewImports.cshtml"
using DISFinalProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kotha\Source\Repos\DISFinalProject\Views\_ViewImports.cshtml"
using DISFinalProject.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bf73f159725ebc41637283ca07b8f3d7937a8b53", @"/Views/Home/Model.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"18612baf7684f7056ce1a1ecc69667f15507f7b3", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Model : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\kotha\Source\Repos\DISFinalProject\Views\Home\Model.cshtml"
  
    ViewData["Title"] = "Model";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <ul class=""collapsible"">
        <li>
            <div class=""collapsible-header"">Data Source and Description</div>
            <div class=""collapsible-body"">
                <p>
                    We have used <b>National Park Service</b> application programming interface.
                    All the api documents and usage guides are available <a href=""https://www.nps.gov/subjects/developer/api-documentation.htm"">here.</a>
                </p>
                <p>
                    As per NPS dataset, every national park has an associated list of activities (Ex. Arts and Culture, Biking)
                    describing what the park is primarily famous for.
                </p>
                <p>
                    Again parks have got their associated topics too. Examples include animals, archeology, arctic. We have developed
                    here a search api to search list of parks statewise based on user selected activity and topic.
                </p");
            WriteLiteral(@">
                <p>
                    In the data exploration section we are showing histogram containing the count of total number of parks for
                    each activity and topic statewise.
                </p>
                <p>
                    Below are the api end-points we have used.
                </p>
                <b>GET/</b> https://developer.nps.gov/api/v1/parks <br>
                <b>GET/</b> https://developer.nps.gov/api/v1/topics <br>
                <b>GET/</b> https://developer.nps.gov/api/v1/topics/parks <br>
                <b>GET/</b> https://developer.nps.gov/api/v1/activities <br>
                <b>GET/</b> https://developer.nps.gov/api/v1/activities/parks <br>
            </div>
        </li>
        <li class=""active"">
            <div class=""collapsible-header"">Data Model</div>
            <div class=""collapsible-body"">
                <img id=""modelimg""");
            BeginWriteAttribute("src", " src=\"", 1995, "\"", 2036, 1);
#nullable restore
#line 39 "C:\Users\kotha\Source\Repos\DISFinalProject\Views\Home\Model.cshtml"
WriteAttributeValue("", 2001, Url.Content("~/img/datamodel.png"), 2001, 35, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@">
                <p>
                    The data model essentially contains two many-to-many relationships. One between the entity <b><i>Parks</i></b>
                    and <b><i>Activities</i></b> and another between <b><i>Parks</i></b> and <b><i>Topic</i></b>. To facilitate
                    easy transition from logical model to stuctural schema diagram, we have broken down each many-to-many relationship with
                    two one-to-many relationships.
                </p>
            </div>
        </li>
        <li>
            <div class=""collapsible-header"">Collaboration</div>
            <div class=""collapsible-body"">
                <p> We have used github to collaborate across the team during various stages of bug-fixing and development</p>
            </div>
        </li>
    </ul>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
